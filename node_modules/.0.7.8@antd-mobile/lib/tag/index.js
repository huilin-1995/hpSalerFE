'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactNative = require('react-native');

var _index = require('./style/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var Modal = function (_React$Component) {
    (0, _inherits3["default"])(Modal, _React$Component);

    function Modal(props) {
        (0, _classCallCheck3["default"])(this, Modal);

        var _this = (0, _possibleConstructorReturn3["default"])(this, _React$Component.call(this, props));

        _this.onClick = function () {
            var _this$props = _this.props;
            var type = _this$props.type;
            var disabled = _this$props.disabled;
            var closable = _this$props.closable;
            var onChange = _this$props.onChange;

            if (type === 'read' || disabled) {
                return;
            }
            if (closable) {
                _this.onClose();
            } else {
                (function () {
                    var isSelect = _this.state.selected;
                    _this.setState({
                        selected: !isSelect
                    }, function () {
                        onChange(!isSelect);
                    });
                })();
            }
        };
        _this.onClose = function () {
            var _this$props2 = _this.props;
            var onClose = _this$props2.onClose;
            var afterClose = _this$props2.afterClose;

            onClose();
            _this.setState({
                closed: true
            }, afterClose);
        };
        _this.state = {
            selected: props.selected,
            closed: false
        };
        return _this;
    }

    Modal.prototype.render = function render() {
        var _props = this.props;
        var children = _props.children;
        var type = _props.type;
        var size = _props.size;
        var disabled = _props.disabled;
        var closable = _props.closable;
        var style = _props.style;

        var selected = this.state.selected;
        var wrapStyles = [_index2["default"][size + 'Wrap']];
        var textStyles = [_index2["default"][size + 'Text']];
        if (!selected) {
            wrapStyles.push(_index2["default"].normalWrap);
            textStyles.push(_index2["default"].normalText);
        }
        if ((selected || closable) && !disabled && type !== 'read') {
            wrapStyles.push(_index2["default"].activeWrap);
            textStyles.push(_index2["default"].activeText);
        }
        if (type === 'read') {
            wrapStyles.push(_index2["default"].readWrap);
            textStyles.push(_index2["default"].readText);
        }
        if (disabled) {
            wrapStyles.push(_index2["default"].disabledWrap);
            textStyles.push(_index2["default"].disabledText);
        }
        var closeDom = closable && !disabled && type !== 'read' && size === 'large' ? React.createElement(
            _reactNative.View,
            { style: [_index2["default"].closeDom] },
            React.createElement(_reactNative.View, { style: [_index2["default"].fixAndroid] }),
            React.createElement(
                _reactNative.View,
                { style: [_index2["default"].closeWrap] },
                React.createElement(
                    _reactNative.Text,
                    { style: [_index2["default"].closeX] },
                    'Ã—'
                )
            )
        ) : null;
        return this.state.closed ? null : React.createElement(
            _reactNative.View,
            { style: [_index2["default"].tag, style] },
            React.createElement(
                _reactNative.TouchableWithoutFeedback,
                { onPress: this.onClick },
                React.createElement(
                    _reactNative.View,
                    { style: [_index2["default"].wrap, wrapStyles] },
                    React.createElement(
                        _reactNative.Text,
                        { style: textStyles },
                        children,
                        ' '
                    ),
                    closeDom
                )
            )
        );
    };

    return Modal;
}(React.Component);

exports["default"] = Modal;

Modal.defaultProps = {
    type: 'read',
    disabled: false,
    size: 'large',
    closable: false,
    selected: false,
    onChange: function onChange() {},
    onClose: function onClose() {},
    afterClose: function afterClose() {}
};
module.exports = exports['default'];