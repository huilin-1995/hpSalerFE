'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactNative = require('react-native');

var _index = require('./style/index');

var _index2 = _interopRequireDefault(_index);

var _rnTopview = require('rn-topview');

var _rnTopview2 = _interopRequireDefault(_rnTopview);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var WIN_HEIGHT = _reactNative.Dimensions.get('window').height;

var Dropdown = function (_React$Component) {
    (0, _inherits3["default"])(Dropdown, _React$Component);

    function Dropdown(props) {
        (0, _classCallCheck3["default"])(this, Dropdown);

        var _this = (0, _possibleConstructorReturn3["default"])(this, _React$Component.call(this, props));

        _this.onMaskClose = function () {
            if (_this.props.maskClosable) {
                _this.animatedHide();
            }
        };
        _this.animatedHide = function () {
            _this.state.translateY.setValue(0);
            _this.anim = _reactNative.Animated.timing(_this.state.translateY, {
                duration: 200,
                toValue: -WIN_HEIGHT,
                delay: 5
            });
            _this.anim.start(function () {
                _this.anim = null;
                _rnTopview2["default"].remove();
            });
        };
        _this.state = {
            translateY: new _reactNative.Animated.Value(0)
        };
        return _this;
    }

    Dropdown.prototype.componentWillMount = function componentWillMount() {
        var _this2 = this;

        _reactNative.DeviceEventEmitter.addListener('dropdownHide', function () {
            _this2.animatedHide();
        });
    };

    Dropdown.prototype.componentDidMount = function componentDidMount() {
        var _this3 = this;

        this.state.translateY.setValue(-WIN_HEIGHT);
        this.anim = _reactNative.Animated.timing(this.state.translateY, {
            duration: 200,
            toValue: 0,
            delay: 5
        });
        this.anim.start(function () {
            _this3.anim = null;
        });
    };

    Dropdown.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.timer) {
            clearTimeout(this.timer);
        }
        if (this.anim) {
            this.anim.stop();
            this.anim = null;
        }
        _reactNative.DeviceEventEmitter.removeAllListeners('dropdownHide');
    };

    Dropdown.prototype.render = function render() {
        return React.createElement(
            _reactNative.View,
            { style: _index2["default"].wrap },
            React.createElement(
                _reactNative.Modal,
                { animationType: 'none', transparent: true, visible: true, onRequestClose: _reactNative.Platform.OS === 'android' ? this.animatedHide : undefined },
                React.createElement(
                    _reactNative.TouchableWithoutFeedback,
                    { onPress: this.onMaskClose },
                    React.createElement(_reactNative.View, { style: _index2["default"].mask })
                ),
                React.createElement(
                    _reactNative.Animated.View,
                    { style: [_index2["default"].content, {
                            transform: [{ translateY: this.state.translateY }]
                        }] },
                    this.props.children
                )
            )
        );
    };

    return Dropdown;
}(React.Component);

Dropdown.defaultProps = {
    maskClosable: true
};
exports["default"] = {
    show: function show(content, options) {
        _rnTopview2["default"].set(React.createElement(
            Dropdown,
            { maskClosable: options.maskClosable },
            content
        ));
    },
    hide: function hide() {
        _reactNative.DeviceEventEmitter.emit('dropdownHide');
    }
};
module.exports = exports['default'];