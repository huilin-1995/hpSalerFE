'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var ListItem = function (_React$Component) {
    (0, _inherits3["default"])(ListItem, _React$Component);

    function ListItem(props) {
        (0, _classCallCheck3["default"])(this, ListItem);

        var _this = (0, _possibleConstructorReturn3["default"])(this, _React$Component.call(this, props));

        _this.onClick = function (e) {
            if (_this.props.onClick) {
                _this.props.onClick(e);
            }
        };
        _this.onTouchStart = function () {
            if (_this.props.onClick) {
                _this.setState({
                    hover: true
                });
            }
        };
        _this.onTouchEnd = function () {
            if (_this.props.onClick) {
                _this.setState({
                    hover: false
                });
            }
        };
        _this.state = {
            hover: false
        };
        return _this;
    }

    ListItem.prototype.render = function render() {
        var _classNames, _classNames2;

        var _props = this.props;
        var prefixCls = _props.prefixCls;
        var thumb = _props.thumb;
        var arrow = _props.arrow;
        var error = _props.error;
        var children = _props.children;
        var extra = _props.extra;
        var className = _props.className;
        var align = _props.align;
        var style = _props.style;
        var hover = this.state.hover;

        var thumbDom = void 0;
        var arrowDom = void 0;
        var wrapCls = (0, _classnames2["default"])((_classNames = {}, (0, _defineProperty3["default"])(_classNames, prefixCls + '-item', true), (0, _defineProperty3["default"])(_classNames, prefixCls + '-item-error', error), (0, _defineProperty3["default"])(_classNames, prefixCls + '-item-top', align === 'top'), (0, _defineProperty3["default"])(_classNames, prefixCls + '-item-middle', align === 'middle'), (0, _defineProperty3["default"])(_classNames, prefixCls + '-item-bottom', align === 'bottom'), (0, _defineProperty3["default"])(_classNames, prefixCls + '-item-hover', hover), (0, _defineProperty3["default"])(_classNames, className, className), _classNames));
        var arrowCls = (0, _classnames2["default"])((_classNames2 = {}, (0, _defineProperty3["default"])(_classNames2, prefixCls + '-arrow-horizontal', arrow === 'horizontal'), (0, _defineProperty3["default"])(_classNames2, prefixCls + '-arrow-vertical', arrow === 'down' || arrow === 'up'), (0, _defineProperty3["default"])(_classNames2, prefixCls + '-arrow-vertical-up', arrow === 'up'), _classNames2));
        if (thumb) {
            if (typeof thumb === 'string') {
                thumbDom = React.createElement(
                    'div',
                    { className: prefixCls + '-thumb' },
                    React.createElement('img', { src: thumb })
                );
            } else {
                thumbDom = React.createElement(
                    'div',
                    { className: prefixCls + '-thumb' },
                    thumb
                );
            }
        }
        /* arrow有值，则保留这个dom坑位 */
        if (arrow !== '') {
            /* 当值是horizontal时,渲染水平箭头 */
            if (arrow === 'empty') {
                arrowDom = React.createElement('div', { className: prefixCls + '-arrow' });
            } else {
                arrowDom = React.createElement(
                    'div',
                    { className: prefixCls + '-arrow' },
                    React.createElement('span', { className: arrowCls })
                );
            }
        } else {
            arrowDom = null;
        }
        return React.createElement(
            'div',
            { className: wrapCls, onClick: this.onClick, onTouchStart: this.onTouchStart, onTouchEnd: this.onTouchEnd, onTouchCancel: this.onTouchEnd, style: style },
            thumbDom,
            React.createElement(
                'div',
                { className: prefixCls + '-line' },
                children !== '' ? React.createElement(
                    'div',
                    { className: prefixCls + '-content' },
                    children
                ) : null,
                extra !== '' ? React.createElement(
                    'div',
                    { className: prefixCls + '-extra' },
                    extra
                ) : null,
                arrowDom
            )
        );
    };

    return ListItem;
}(React.Component);

exports["default"] = ListItem;

ListItem.defaultProps = {
    prefixCls: 'am-list',
    thumb: '',
    arrow: '',
    children: '',
    extra: '',
    error: false,
    align: 'middle'
};
module.exports = exports['default'];