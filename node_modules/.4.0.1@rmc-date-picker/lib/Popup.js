'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _DatePicker = require('./DatePicker');

var _DatePicker2 = _interopRequireDefault(_DatePicker);

var _en_US = require('./locale/en_US');

var _en_US2 = _interopRequireDefault(_en_US);

var _utils = require('./utils');

var _Popup = require('rmc-picker/lib/Popup');

var _Popup2 = _interopRequireDefault(_Popup);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var EXCLUDE_PROPS = {
    popupPrefixCls: 1,
    pickerPrefixCls: 1,
    minDate: 1,
    maxDate: 1,
    mode: 1,
    onPickerChange: 1,
    onChange: 1,
    locale: 1,
    date: 1
};

var PopupDatePicker = function (_React$Component) {
    (0, _inherits3["default"])(PopupDatePicker, _React$Component);

    function PopupDatePicker(props) {
        (0, _classCallCheck3["default"])(this, PopupDatePicker);

        var _this = (0, _possibleConstructorReturn3["default"])(this, _React$Component.call(this, props));

        _this.onPickerChange = function (pickerDate) {
            _this.setState({
                pickerDate: pickerDate
            });
            _this.props.onPickerChange(pickerDate);
        };
        _this.onOk = function () {
            _this.props.onChange(_this.state.pickerDate || _this.props.date);
        };
        _this.fireVisibleChange = function (visible) {
            if (_this.state.visible !== visible) {
                if (!('visible' in _this.props)) {
                    _this.setVisibleState(visible);
                }
                _this.props.onVisibleChange(visible);
            }
        };
        _this.state = {
            pickerDate: null,
            visible: _this.props.visible || false
        };
        return _this;
    }

    PopupDatePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if ('visible' in nextProps) {
            this.setVisibleState(nextProps.visible);
        }
    };

    PopupDatePicker.prototype.setVisibleState = function setVisibleState(visible) {
        this.setState({
            visible: visible
        });
        if (!visible) {
            this.setState({
                pickerDate: null
            });
        }
    };

    PopupDatePicker.prototype.getModal = function getModal() {
        var props = this.props;
        var dpProps = {};
        if (props.minDate) {
            dpProps.minDate = props.minDate;
        }
        if (props.maxDate) {
            dpProps.maxDate = props.maxDate;
        }
        if (props.pickerPrefixCls) {
            dpProps.pickerPrefixCls = props.pickerPrefixCls;
        }
        if (props.prefixCls) {
            dpProps.prefixCls = props.prefixCls;
        }
        return React.createElement(_DatePicker2["default"], (0, _extends3["default"])({ date: this.state.pickerDate || props.date, mode: props.mode, locale: props.locale, onDateChange: this.onPickerChange }, dpProps));
    };

    PopupDatePicker.prototype.render = function render() {
        var props = (0, _utils.exclude)(this.props, EXCLUDE_PROPS);
        props.prefixCls = this.props.popupPrefixCls;
        return React.createElement(_Popup2["default"], (0, _extends3["default"])({}, props, { onVisibleChange: this.fireVisibleChange, onOk: this.onOk, content: this.getModal(), visible: this.state.visible }));
    };

    return PopupDatePicker;
}(React.Component);

exports["default"] = PopupDatePicker;

PopupDatePicker.defaultProps = {
    onVisibleChange: _utils.noop,
    popupPrefixCls: 'rmc-picker-popup',
    mode: 'datetime',
    locale: _en_US2["default"],
    onChange: _utils.noop,
    onDismiss: _utils.noop,
    onPickerChange: _utils.noop
};
module.exports = exports['default'];