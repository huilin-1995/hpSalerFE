'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactNative = require('react-native');

var _variables = require('../style/variables');

var _variables2 = _interopRequireDefault(_variables);

var _index = require('./style/index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var TextAreaItem = function (_React$Component) {
    (0, _inherits3["default"])(TextAreaItem, _React$Component);

    function TextAreaItem(props) {
        (0, _classCallCheck3["default"])(this, TextAreaItem);

        var _this = (0, _possibleConstructorReturn3["default"])(this, _React$Component.call(this, props));

        _this.onChange = function (event) {
            var text = event.nativeEvent.text;
            var height = void 0;
            var _this$props = _this.props;
            var autoHeight = _this$props.autoHeight;
            var rows = _this$props.rows;

            if (autoHeight) {
                height = event.nativeEvent.contentSize.height;
            } else if (rows > 1) {
                height = 6 * rows * _variables2["default"].grid;
            } else {
                height = 10 * _variables2["default"].grid;
            }
            _this.setState({
                value: text,
                inputCount: text.length,
                height: height
            });
            _this.props.onChange({ text: text });
        };
        _this.onFocus = function () {
            _this.props.onFocus();
        };
        _this.onBlur = function () {
            _this.props.onBlur();
        };
        _this.onErrorClick = function () {
            _this.props.onErrorClick();
        };
        _this.state = {
            value: props.value,
            inputCount: 0,
            height: props.rows > 1 ? 6 * props.rows * _variables2["default"].grid : 10 * _variables2["default"].grid
        };
        return _this;
    }

    TextAreaItem.prototype.render = function render() {
        var _this2 = this;

        var inputCount = this.state.inputCount;
        var _props = this.props;
        var rows = _props.rows;
        var error = _props.error;
        var clear = _props.clear;
        var count = _props.count;
        var placeholder = _props.placeholder;
        var autoHeight = _props.autoHeight;
        var editable = _props.editable;

        var inputStyle = {
            color: error ? '#f50' : _variables2["default"].neutral_10
        };
        var maxLength = count > 0 ? count : null;
        return React.createElement(
            _reactNative.View,
            null,
            React.createElement(_reactNative.TextInput, { style: [_index2["default"].input, inputStyle, { height: Math.max(35, this.state.height) }], onChange: function onChange(event) {
                    return _this2.onChange(event);
                }, onFocus: this.onFocus, onBlur: this.onBlur, value: this.state.value, placeholder: placeholder, multiline: rows > 1 || autoHeight, numberOfLines: rows, maxLength: maxLength, clearButtonMode: clear ? 'while-editing' : 'never', editable: editable }),
            error && React.createElement(
                _reactNative.TouchableWithoutFeedback,
                { onPress: this.onErrorClick },
                React.createElement(
                    _reactNative.View,
                    { style: [_index2["default"].errorIcon] },
                    React.createElement(_reactNative.Image, { source: { uri: 'https://zos.alipayobjects.com/rmsportal/nHIBAEcRUDcxCUd.png' }, style: { width: 16, height: 16 } })
                )
            ),
            rows > 1 && count > 0 && React.createElement(
                _reactNative.View,
                { style: [_index2["default"].count] },
                React.createElement(
                    _reactNative.Text,
                    null,
                    inputCount,
                    ' / ',
                    count
                )
            )
        );
    };

    return TextAreaItem;
}(React.Component);

exports["default"] = TextAreaItem;

TextAreaItem.propTypes = {
    onChange: _react.PropTypes.func,
    onFocus: _react.PropTypes.func,
    onBlur: _react.PropTypes.func,
    onErrorClick: _react.PropTypes.func,
    clear: _react.PropTypes.bool,
    error: _react.PropTypes.bool,
    autoHeight: _react.PropTypes.bool,
    editable: _react.PropTypes.bool,
    rows: _react.PropTypes.number,
    value: _react.PropTypes.string,
    placeholder: _react.PropTypes.string,
    count: _react.PropTypes.number,
    keyboardType: _react.PropTypes.string
};
TextAreaItem.defaultProps = {
    onChange: function onChange() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    onErrorClick: function onErrorClick() {},

    clear: true,
    error: false,
    editable: true,
    rows: 1,
    value: '',
    placeholder: '',
    count: 0,
    keyboardType: 'default',
    autoHeight: false
};
module.exports = exports['default'];