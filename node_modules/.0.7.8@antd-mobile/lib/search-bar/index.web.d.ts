import * as React from 'react';
export interface SearchBarProps {
    /** web only */
    prefixCls?: string;
    style?: React.CSSProperties;
    /** web only */
    className?: string;
    value?: string;
    placeholder?: string;
    onSubmit?: Function;
    onChange?: Function;
    onFocus?: Function;
    onBlur?: Function;
    onCancel?: Function;
    onClear?: Function;
    showCancelButton?: boolean;
    cancelTxt?: string;
    disablSearch?: boolean;
}
export interface SearchBarState {
    value?: string;
    focus?: boolean;
}
export default class SearchBar extends React.Component<SearchBarProps, SearchBarState> {
    static propTypes: {
        prefixCls: React.Requireable<any>;
        style: React.Requireable<any>;
        value: React.Requireable<any>;
        placeholder: React.Requireable<any>;
        onSubmit: React.Requireable<any>;
        onChange: React.Requireable<any>;
        onFocus: React.Requireable<any>;
        onBlur: React.Requireable<any>;
        onCancel: React.Requireable<any>;
        onClear: React.Requireable<any>;
        showCancelButton: React.Requireable<any>;
        cancelTxt: React.Requireable<any>;
        disablSearch: React.Requireable<any>;
    };
    static defaultProps: {
        prefixCls: string;
        value: string;
        placeholder: string;
        onSubmit: () => void;
        onChange: () => void;
        onFocus: () => void;
        onBlur: () => void;
        onCancel: () => void;
        onClear: () => void;
        showCancelButton: boolean;
        cancelTxt: string;
        disablSearch: boolean;
    };
    constructor(props: any);
    componentWillReceiveProps(nextProps: any): void;
    onSubmit: (e: any) => void;
    onChange: (e: any) => void;
    onFocus: (e: any) => void;
    onBlur: (e: any) => void;
    onCancel: () => void;
    onClear: () => void;
    render(): JSX.Element;
}
