import * as React from 'react';
import { PickerProps } from './PickerTypes';
export interface PickerState {
    selectedValue: any;
}
export default class Picker extends React.Component<PickerProps, PickerState> {
    static defaultProps: {
        prefixCls: string;
        pure: boolean;
        onValueChange(): void;
    };
    startScrollTop: number;
    clientHeight: number;
    contentHeight: number;
    minScrollTop: number;
    maxScrollTop: number;
    isDecelerating: number;
    isAnimating: number;
    lastTouchMove: number;
    itemHeight: number;
    scrollTop: number;
    isTracking: boolean;
    didDecelerationComplete: boolean;
    scheduledTop: number;
    positions: number[];
    minDecelerationScrollTop: number;
    maxDecelerationScrollTop: number;
    decelerationVelocityY: number;
    refs: {
        [key: string]: any;
        content: HTMLElement;
        component: HTMLElement;
        indicator: HTMLElement;
    };
    constructor(props: PickerProps);
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: any): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    componentDidUpdate(prevProps: any): void;
    componentWillUnmount(): void;
    onPanStart: (e: any) => void;
    onPan: (e: any) => void;
    onPanEnd: () => void;
    setTop(top: any): void;
    setDimensions(clientHeight: any, contentHeight: any): void;
    clearAnim(): void;
    selectByIndex(index: any, animate: any): void;
    select(value: any, animate: any): void;
    scrollTo(t: any, a?: any): void;
    fireValueChange(selectedValue: any): void;
    scrollingComplete(): void;
    publish(top: any, animationDuration?: number): void;
    startDeceleration(): void;
    stepThroughDeceleration(): void;
    render(): JSX.Element;
}
