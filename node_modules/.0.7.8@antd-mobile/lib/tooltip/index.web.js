'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _rcTooltip = require('rc-tooltip');

var _rcTooltip2 = _interopRequireDefault(_rcTooltip);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var Tooltip = function (_React$Component) {
    (0, _inherits3["default"])(Tooltip, _React$Component);

    function Tooltip(props) {
        (0, _classCallCheck3["default"])(this, Tooltip);

        var _this = (0, _possibleConstructorReturn3["default"])(this, _React$Component.call(this, props));

        _this.onVisibleChange = function (visible) {
            _this.setState({ visible: visible });
            _this.props.onVisibleChange(visible);
        };
        _this.state = {
            visible: false
        };
        return _this;
    }

    Tooltip.prototype.render = function render() {
        var _props = this.props;
        var children = _props.children;
        var prefixCls = _props.prefixCls;
        var title = _props.title;
        var overlay = _props.overlay;
        // Hide tooltip when there is no title

        var visible = this.state.visible;
        if (!title && !overlay) {
            visible = false;
        }
        if ('visible' in this.props) {
            visible = this.props.visible;
        }
        var restProps = (0, _objectAssign2["default"])({}, this.props);
        ['prefixCls', 'overlay', 'visible', 'trigger', 'onVisibleChange', 'children'].forEach(function (prop) {
            if (restProps.hasOwnProperty(prop)) {
                delete restProps[prop];
            }
        });
        return React.createElement(
            _rcTooltip2["default"],
            (0, _extends3["default"])({ prefixCls: prefixCls, overlay: title, visible: visible, trigger: ['click'], onVisibleChange: this.onVisibleChange }, restProps),
            children
        );
    };

    return Tooltip;
}(React.Component);

exports["default"] = Tooltip;

Tooltip.defaultProps = {
    prefixCls: 'am-tooltip',
    placement: 'bootomLeft',
    onVisibleChange: function onVisibleChange() {}
};
module.exports = exports['default'];